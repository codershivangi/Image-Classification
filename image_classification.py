# -*- coding: utf-8 -*-
"""Image_Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JJO87aJnseC7ZYibEkgoe1ZSi_XBMJzp
"""

import tensorflow as tf
from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt
import numpy as np

(X_train,y_train), (X_test,y_test) = datasets.cifar10.load_data()
X_train.shape

X_test.shape

#Normalize pixel values to be between 0 and 1
X_train, X_test = X_train/255.0, X_test/255.0

#Show sample images from the dataset
class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']

plt.figure(figsize=(10,10))
for i in range(16):
  plt.subplot(4,4,i+1)
  plt.xticks([])
  plt.yticks([])
  plt.grid(False)
  plt.imshow(X_train[i])
  plt.xlabel(class_names[y_train[i][0]])
  plt.show()

"""Data Preprocessing

"""

#One-hot encode labels
y_train = tf.keras.utils.to_categorical(y_train, 10)
y_test = tf.keras.utils.to_categorical(y_test,10)

#Split training data into train and validation sets
X_val = X_train[-5000:]
y_val = y_train[-5000:]
X_train = X_train[:-5000]
y_train = y_train[:-5000]

#Build the CNN Model
model = models.Sequential([
    layers.Conv2D(32,(3,3),activation='relu',input_shape=(32,32,3)),
    layers.MaxPooling2D((2,2)),

    layers.Conv2D(64,(3,3),activation='relu'),
    layers.MaxPooling2D((2,2)),

    layers.Conv2D(64,(3,3),activation='relu'),
    layers.Flatten(),

    layers.Dense(64, activation='relu'),
    layers.Dense(10,activation='softmax')

])

#Compile the model
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

model.summary()

#Train the model

history = model.fit(X_train,y_train,epochs=10,
                    validation_data=(X_val,y_val))

#Evaluate on the test set

test_loss,test_acc = model.evaluate(X_test,y_test,verbose=2)
print(f"Test accuracy: {test_acc:.4f}")

#Plot accuracy and loss during training

plt.plot(history.history['accuracy'],label='accuracy')
plt.plot(history.history['val_accuracy'],label='val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend(loc='lower right')
plt.show()

import numpy as np
import matplotlib.pyplot as plt

# CIFAR-10 class names
class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']

# Select a random image from the test set
random_idx = np.random.randint(0, X_test.shape[0])
input_image = X_test[random_idx]

# Add a batch dimensions (model expects input of shape [batch_size, height, width, channels])
input_image_reshaped = np.expand_dims(input_image, axis=0)

# Predict the class of the image using the CNN model
predictions = model.predict(input_image_reshaped)
predicted_label = np.argmax(predictions)

# Display the image with the predicted label
plt.imshow(input_image)
plt.title(f'Predicted: {class_names[predicted_label]}')
plt.axis('off')
plt.show()

# Print the actual label (for comparison)
actual_label = y_test[random_idx]

# Get the index of the actual class using argmax
actual_class_index = np.argmax(actual_label)
print(f"Actual label: {class_names[actual_class_index]}")